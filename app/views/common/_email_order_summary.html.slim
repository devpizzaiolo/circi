
h3.customer-order-number= "Order No: #{@order.order_number}"
	
p Your order has been submitted to your local store. Order confirmation details are below.

p
	| If you have any changes to your order, please contact the store directly: 
	strong =@order.franchise_location.phone
	
p
	strong= raw "This is generated by an automated system, please do not reply to this email.<br />Contact #{mail_to 'online@pizzaiolo.ca'} for any questions or concerns."
	
br

- if !@order.order_additional.blank? && @order.order_additional['catering_order'] == "1"
	h4.text-info="Note, This is a Catering Order for #{@order.order_additional['catering_order_group_number']} people."
	
	hr

	
br
br
h3.special-h3 Order Location
p.special-p You ordered from:
p
	=@order.franchise_location.address
	p
		span.hidden-phone = @order.franchise_location.phone
	
br

- if @order.for_pickup
	p.special-p
		| Your order will be ready for pickup at:
		br
		strong= @order.to_be_ready_dates_string
		br
- else

	p
		| Your order will be delivered by:
		br
		strong= @order.to_be_ready_dates_string
		br
		small
			| Delivery times can be affected by weather, traffic, distance, holidays, and order volumes.
	br
	p
		strong Delivering to:
		br
		.special-p
			= @order.delivery_address_1
			br
			-unless @order.delivery_address_2.blank?
				= @order.delivery_address_2
				br
			= @order.delivery_city
			br
			= @order.delivery_postal_code
			br

/ - if @order.for_pickup == false
/ 	p.text-info
/ 		strong
/ 			| You have chosen to pay by 
/ 			/ = @order.method_of_payment.try(:name)
	
/ 	- unless @order.method_of_payment.try(:disclaimer).blank?
/ 		p.muted
/ 			small
/ 				 / = @order.method_of_payment.try(:disclaimer)
						
						
/ 			br
/ 			br
		


table.table.table-condensed.table-striped.table-bordered width="100%"
	thead
		br
		th
			div.item-title.mail-header-admin align="left" Product
		th
			div.item-title.mail-header-admin align="right" Total Item Price
	tbody

		- @order.order_items.where("deal_id IS NOT NULL").group_by(&:deal_id).each do |deal_id, order_items|
			tr.deal-title-header
					td
						h2 = order_items.first.deal_title.html_safe
					td
						div.item-title align="right"
							= raw "#{number_to_currency( @order.deal_price(deal_id) * order_items.first.quantity.to_i )}"
			
			- order_items.each_with_index do |order_item, index|
				tr.deal-item-details-for-admin.deal-title-header
					td
						strong.item-title.customer-item
							= order_item.item_title
							br
							-if order_item.custom == true
								|  (Custom)
						small.special-p
							- if order_item.product_info['product_type'] != "calzone"
								- selected_toppings=order_item.toppings_1
								- if selected_toppings.count > 0
									ul.special-ul
										- if selected_toppings.any? { |s| s.include?('Whole Pizza') }
											strong Whole Pizza
											ul.inner-ul
												- selected_toppings.each do |t|
													- if t.include?('Whole Pizza') then
														li
															= raw "#{t[11..-1]}"
										- if selected_toppings.any? { |s| s.include?('Left Side') }
											strong Left Side
											ul
												- selected_toppings.each do |t|
													- if t.include?('Left Side') then
														li
															= raw "#{t[9..-1]}"
										- if selected_toppings.any? { |s| s.include?('Right Side') }
											strong Right Side
											ul
												- selected_toppings.each do |t|
													- if t.include?('Right Side') then
														li
															= raw "#{t[10..-1]}"
								- else
									= raw "#{pluralize(0, 'topping')}"
								
								- @pizza_preset = PizzaPreset.find(order_item.product_info['pizza_preset_id'])
								- if @pizza_preset.present? && @pizza_preset.is_product_combo
									div.mb-3
										- @product_combo = ProductCombo.find(@pizza_preset.product_combo_id)
										- @additional_items_names = @product_combo.categories_of_additional_items.try(:split, ",")
										- @beverages_additional_items = @product_combo.beverages_additional_items.try(:split, ",")
										- if order_item.product_info["order_additional"] && order_item.product_info["order_additional"].count > 0
											p.strong.m-t-10 
												| Additional

											- if order_item.product_info["order_additional"]['dipping_sauces'] && order_item.product_info["order_additional"]['dipping_sauces'].count > 0															
												- order_item.product_info["order_additional"]['dipping_sauces'].each do |dipping_sauce|
													- if dipping_sauce[1].to_i > 0
														p
															strong = "- #{get_dipping_sauce_name(dipping_sauce[0])} Dipping Sauce"
															= " "
															small
																= "x #{dipping_sauce[1]}"

											- if order_item.product_info["order_additional"]['beverages'] && order_item.product_info["order_additional"]['beverages'].count > 0															
												- order_item.product_info["order_additional"]['beverages'].each do |beverage|
													- if beverage[1].to_i > 0
														p
															strong = "- #{get_beverage_name(beverage[0])}"
															= " "
															small
																= "x #{beverage[1]}"
								
									/ p = raw "Quantity: #{order_item.quantity}"
							- else
								- if order_item.toppings.count > 0
									= raw "#{pluralize(order_item.num_paid_toppings, 'additional topping')}<span class='hidden-phone'> : #{order_item.toppings.to_sentence(:last_word_connector => ' and ')}</span>"
					td
						div.item-title align="right"
							/= number_to_currency( order_item.price * order_item.quantity.to_i )
			tr
				td
					p = raw "Quantity: #{order_items.first.quantity}"
				td

		- @order.order_items.where(deal_id: nil).each do |order_item|
			tr
				td
					strong.item-title.customer-item
						= order_item.item_title
						br
						-if order_item.custom == true
							|  (Custom)
					small.special-p
						- if order_item.product_info['product_type'] != "calzone"
							- selected_toppings=order_item.toppings_1
							- if selected_toppings.count > 0
								/span= raw "#{pluralize(order_item.num_paid_toppings, 'topping')}"
								ul.special-ul
									- if selected_toppings.any? { |s| s.include?('Whole Pizza') }
										strong Whole Pizza
										ul.inner-ul
											- selected_toppings.each do |t|
												- if t.include?('Whole Pizza') then
													li
														= raw "#{t[11..-1]}"
									- if selected_toppings.any? { |s| s.include?('Left Side') }
										strong Left Side
										ul
											- selected_toppings.each do |t|
												- if t.include?('Left Side') then
													li
														= raw "#{t[9..-1]}"
									- if selected_toppings.any? { |s| s.include?('Right Side') }
										strong Right Side
										ul
											- selected_toppings.each do |t|
												- if t.include?('Right Side') then
													li
														= raw "#{t[10..-1]}"
							- else
								= raw "#{pluralize(0, 'topping')}"
							
							- @pizza_preset = PizzaPreset.find(order_item.product_info['pizza_preset_id'])
							- if @pizza_preset.present? && @pizza_preset.is_product_combo
								div.mb-3
									- @product_combo = ProductCombo.find(@pizza_preset.product_combo_id)
									- @additional_items_names = @product_combo.categories_of_additional_items.try(:split, ",")
									- @beverages_additional_items = @product_combo.beverages_additional_items.try(:split, ",")
									- if order_item.product_info["order_additional"] && order_item.product_info["order_additional"].count > 0
										p.strong.m-t-10 
											| Additional

										- if order_item.product_info["order_additional"]['dipping_sauces'] && order_item.product_info["order_additional"]['dipping_sauces'].count > 0															
											- order_item.product_info["order_additional"]['dipping_sauces'].each do |dipping_sauce|
												- if dipping_sauce[1].to_i > 0
													p
														strong = "- #{get_dipping_sauce_name(dipping_sauce[0])} Dipping Sauce"
														= " "
														small
															= "x #{dipping_sauce[1]}"

										- if order_item.product_info["order_additional"]['beverages'] && order_item.product_info["order_additional"]['beverages'].count > 0															
											- order_item.product_info["order_additional"]['beverages'].each do |beverage|
												- if beverage[1].to_i > 0
													p
														strong = "- #{get_beverage_name(beverage[0])}"
														= " "
														small
															= "x #{beverage[1]}"
							
								p = raw "Quantity: #{order_item.quantity}"
						- else
							- if order_item.toppings.count > 0
								= raw "#{pluralize(order_item.num_paid_toppings, 'additional topping')}<span class='hidden-phone'> : #{order_item.toppings.to_sentence(:last_word_connector => ' and ')}</span>"
				td
					div.item-title align="right"
						= number_to_currency( order_item.price * order_item.quantity.to_i )
						
		- unless @order.order_additional.blank?
			
			// dipping sauces
		
			- @order.order_additional['dipping_sauces'] && @order.order_additional['dipping_sauces'].each do |dipping_sauce|
				- if dipping_sauce[1].to_i > 0
					tr
						td.special-h3
							= "#{get_dipping_sauce_name(dipping_sauce[0])} Dipping Sauce"
							= " "
							small
								= "x #{dipping_sauce[1]}"
						td.special-h3
							div align="right"
								= number_to_currency( get_dipping_sauce_price_total(dipping_sauce[0],dipping_sauce[1]) )								
			
			
			
			// beverages
		
			- @order.order_additional['beverages'] && @order.order_additional['beverages'].each do |beverage|
				- if beverage[1].to_i > 0
					tr
						td.special-h3
							= get_beverage_name(beverage[0])
							= " "
							small
								= "x #{beverage[1]}"
						td.special-h3
							div align="right"
								= number_to_currency( get_beverage_price_total(beverage[0],beverage[1]) )
		
		
			// salads
			- @order.order_additional['salads'] && @order.order_additional['salads'].each do |salad|
				- if salad[1].to_i > 0
					tr
						td.special-h3
							= get_salad_name(salad[0])
							= " "
							small
								= "x #{salad[1]}"
						td.special-h3
							div align="right"
								= number_to_currency(get_salad_price_total(@order, salad[0], salad[1]) )

			// garlic_breads
			- if @order.order_additional['garlic_breads']
				- @order.order_additional['garlic_breads'] && @order.order_additional['garlic_breads'].each do |garlic_bread|
					- if garlic_bread[1].to_i > 0
						tr
							td.special-h3
								= get_garlic_bread_name(garlic_bread[0])
								= " "
								small
									= "x #{garlic_bread[1]}"
							td.special-h3
								div align="right"
									= number_to_currency(get_garlic_bread_price_total(@order, garlic_bread[0], garlic_bread[1]) )
								
			// cannoli
			- if @order.order_additional['cannolis']
				- @order.order_additional['cannolis'] && @order.order_additional['cannolis'].each do |cannoli|
					- if cannoli[1].to_i > 0
						tr
							td.special-h3
								= get_cannoli_name(cannoli[0])
								= " "
								small
									= "x #{cannoli[1]}"
							td.special-h3
								div align="right"
									= "FREE"
				
			// desserts
			- if @order.order_additional['catering_order'] == "1"
				- @order.order_additional['desserts'] && @order.order_additional['desserts'].each do |dessert|
					- if dessert[1].to_i > 0
						tr
							td..special-h3
								= "#{get_dessert_name(dessert[0])}"
								= " "
								small
									= "x #{dessert[1]}"
							td.special-h3
								div align="right"
									= number_to_currency( get_dessert_price_total(dessert[0], dessert[1]))
									
									
									
			// utensils
			- if @order.order_additional['catering_order'] == "1"
				- @order.order_additional['utensils'] && @order.order_additional['utensils'].each do |utensil|
					- if utensil[1].to_i > 0
						tr
							td.special-h3								
								= "#{get_utensil_name(utensil[0])}"
								= " "
								small
									= "x #{utensil[1]}"
							td.special-h3
								div align="right"
									= "free"
									
										
		- unless @order.total_price_including_sales_tax == 0					
			tr
				td colspan="3"
					div align="right"
						small.special-h3= "Item(s) Total: #{number_to_currency(@order.total_price)}"

			- unless @order.for_pickup?
				tr
					td colspan="3"
						div align="right"
							small.special-h3= "Delivery: #{number_to_currency(@order.delivery)}"
			
			- if @order.discount_code_id.present? && @order.discount_dollar_value > 0
				tr
					td colspan="3"
						div align="right"
							small.special-h3= "Discount: -#{number_to_currency(@order.discount_dollar_value)}"

			- if @order.method_of_payment_id === 4 && @order.tip_amount > 0
				tr
					td colspan="3"
						div align="right"
							small.special-h3= "Tip: #{number_to_currency(@order.tip_amount)}"
					
			tr
				td colspan="3"
					div align="right"
						small.special-h3= "HST (13%): #{number_to_currency(@order.sales_tax_inc_delivery)}"
						
			tr
				td colspan="3"
					div align="right"
						.total-price
							| Total 
							small
								| (inc. HST): 
							= number_to_currency(@order.total_price_including_sales_tax_inc_delivery)
									
br
br

div.center align="center"
	h3.title-01 Method of payment:
	h3.title-01 = "#{@order.method_of_payment.try(:name)}"
	- if @order.method_of_payment_id === 4 && @order.franchise_location.try(:enable_online_payments) && @order.payment_transactions.count > 0 && !@order.payment_transactions.last.transaction_id.blank?
		p = "Transaction ID: #{@order.payment_transactions.try(:last).try(:transaction_id)}"
		p = "Transaction Date #{@order.payment_transactions.last.transaction_date.to_datetime.strftime('%a %b %d, %Y at %I:%M%p')}"
		p = "Status: #{@order.payment_transactions.try(:last).try(:status)}"
		p = "Paid Using: xxxx-xxxx-xxxx-#{@order.payment_transactions.last.last_four_digits}"

	h3.title-01 Thank you for placing an order at Pizzaiolo.ca
	
	
	
	